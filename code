import sys 
import pygame 
import random 
from pygame.locals import *

# ADD FOOD, DICE, TITLE, ENVIRONMENTS, HELP PAGE
pygame.init()

screen = pygame.display.set_mode((1000,500)) 
pygame.display.set_caption('Natural Selection, Chandler Supple')

orange_brown = (255, 153, 0) 
brown = (153, 51, 0) 
light_backing = (255, 255, 102) 
dark_brown = (77, 57, 0) 
white = (255,255,255) 
black = (0,0,0) 
blue = (0, 102, 204) 
red = (255,0,0) 
orange = (255, 204, 0)
grey = (214, 214, 194)
dark_grey = (61, 61, 41)
lime = (0,255,0)
purple = (102, 0, 235)
yellow = (255, 255, 0)
green = (0, 204, 0)

x = random.randint(200, 800) 
y = random.randint(100, 400) 
begin = 0

direct = 'up'
enemy_count = 7
enemy_size = 20
enemy_speed = 3
ready = 750 
once = 0 
i = 0 
none = None

food_count = 10
j = 0 
consumed_count = 0 
score = 0

score = 0
power = 0 
time = 0
health = 0

player_roll = 0

verdana_font = pygame.font.SysFont("verdana", 42) 
score_font = pygame.font.SysFont("verdana", 15) 
title_in_verdana = verdana_font.render("Natural Selection", False, (brown))

clock = pygame.time.Clock()

def gameboard(roll):

    for i in range(0, 12):
        pygame.draw.rect(screen, orange_brown, (0, ((i * 20) + (i * 20) + 20), 20, 20), 0)
        pygame.draw.rect(screen, brown, (980, ((i * 20) + (i * 20) + 20), 20, 20), 0)
        pygame.draw.rect(screen, brown, (0, ((i * 20) + (i * 20)), 20, 20), 0)
        pygame.draw.rect(screen, orange_brown, (980, ((i * 20) + (i * 20)), 20, 20), 0)

    for i in range(0, 25):
        pygame.draw.rect(screen, orange_brown, (((i * 20) + (i * 20) + 20), 0, 20, 20), 0)
        pygame.draw.rect(screen, orange_brown, (((i * 20) + (i * 20) + 20), 480, 20, 20), 0)
        pygame.draw.rect(screen, brown, (((i * 20) + (i * 20)), 0, 20, 20), 0)
        pygame.draw.rect(screen, brown, (((i * 20) + (i * 20)), 480, 20, 20), 0)

        pygame.draw.rect(screen, light_backing, (20, 20, 960, 460), 0)

        screen.blit(title_in_verdana, (38, 420))

    for i in range(0, 5):
        pygame.draw.rect(screen, dark_brown, ((((150 * i) + ((i * 30) + 65)), (145 + (((-1)**i) * (50))), 150, 210)), 0)
        pygame.draw.rect(screen, orange_brown, ((((150 * i) + ((i * 30) + 65)), (145 + (((-1)**i) * (50))), 150, 210)), 3)

    pygame.draw.rect(screen, white, (850, 70, 80, 80), 0)
    pygame.draw.rect(screen, brown, (850, 70, 80, 80), 3)

    dice_number = verdana_font.render(str(roll), False, (brown))
    screen.blit(dice_number, (876, 83))    

def env(color):

    for i in range(0, 12):
        pygame.draw.rect(screen, black, (0, ((i * 20) + (i * 20) + 20), 20, 20), 0)
        pygame.draw.rect(screen, white, (980, ((i * 20) + (i * 20) + 20), 20, 20), 0)
        pygame.draw.rect(screen, white, (0, ((i * 20) + (i * 20)), 20, 20), 0)
        pygame.draw.rect(screen, black, (980, ((i * 20) + (i * 20)), 20, 20), 0)

    for i in range(0, 25):
        pygame.draw.rect(screen, black, (((i * 20) + (i * 20) + 20), 0, 20, 20), 0)
        pygame.draw.rect(screen, black, (((i * 20) + (i * 20) + 20), 480, 20, 20), 0)
        pygame.draw.rect(screen, white, (((i * 20) + (i * 20)), 0, 20, 20), 0)
        pygame.draw.rect(screen, white, (((i * 20) + (i * 20)), 480, 20, 20), 0)

        pygame.draw.rect(screen, color, (20, 20, 960, 460), 0)

class Sprite: 
    def __init__(self, sprite_size, sprite_speed, sprite_sprint_length, direction): 
        global x, y, direct, ready 
        self.sprite_size = sprite_size 
        self.sprite_speed = sprite_speed 
        self.sprite_sprint_length = sprite_sprint_length 
        self.x = x 
        self.y = y 
        self.direction = direction

        if direction[pygame.K_UP]:
            self.y = self.y - self.sprite_speed
            direct = 'up'
        if direction[pygame.K_DOWN]:
            self.y = self.y + self.sprite_speed
            direct = 'down'            
        if direction[pygame.K_RIGHT]:
            self.x = self.x + self.sprite_speed
            direct = 'right'            
        if direction[pygame.K_LEFT]:
            self.x = self.x - self.sprite_speed
            direct = 'left'        

        if direction[pygame.K_SPACE]:
            if (ready >= 765):
                if (direct == 'up'):
                    self.y = self.y - (self.sprite_sprint_length)
                if (direct == 'down'):
                    self.y = self.y + (self.sprite_sprint_length)
                if (direct == 'right'):
                    self.x = self.x + (self.sprite_sprint_length)
                if (direct == 'left'):
                    self.x = self.x - (self.sprite_sprint_length)        
                ready = 0
        if (ready < 765):
            ready = ready + 1

        if (self.x > 1000):
            self.x = 1000
        if (self.x < 0):
            self.x = 0
        if (self.y > 500):
            self.y = 500
        if (self.y < 0):
            self.y = 0

        x = self.x
        y = self.y

        sprite = pygame.draw.circle(screen, blue, (self.x, self.y), sprite_size, 0)
        
class Enemy: 
    def __init__(self, enemy_size_range, enemy_speed_range, color): 
        global x, y, i, once, enemy_x_dict, enemy_y_dict, enemy_count, health

        self.enemy_size_range = enemy_size_range
        self.enemy_speed_range = enemy_speed_range
        self.color = color

        dist_x = enemy_x_dict.get('enemy_x%s' % i) - x
        dist_y = enemy_y_dict.get('enemy_y%s' % i) - y
        # AND SIZE IS LESS THAN SPRITE (IN TERMS OF RADIUS)
        if (dist_x > 5 and dist_x <= 360):
            enemy_x_dict[('enemy_x%s' % i).format(i)] = enemy_x_dict.get('enemy_x%s' % i) - self.enemy_speed_range
        if (dist_x < -5 and dist_y >= -360):
            enemy_x_dict[('enemy_x%s' % i).format(i)] = enemy_x_dict.get('enemy_x%s' % i) + self.enemy_speed_range
        if (dist_y > 5 and dist_y <= 200):
            enemy_y_dict[('enemy_y%s' % i).format(i)] = enemy_y_dict.get('enemy_y%s' % i) - self.enemy_speed_range
        if (dist_y < -5 and dist_y >= -200):
            enemy_y_dict[('enemy_y%s' % i).format(i)] = enemy_y_dict.get('enemy_y%s' % i) + self.enemy_speed_range

        pygame.draw.circle(screen, self.color, (enemy_x_dict.get('enemy_x%s' % i), enemy_y_dict.get('enemy_y%s' % i)), self.enemy_size_range, 0)
        
        if (abs(dist_x) <= 12 and abs(dist_y) <= 12):
            health = health + 5
        
        i = i + 1
        if (i >= enemy_count):
            i = 0
        
class Food: 
    def __init__(self, color): 
        global food_x_dict, food_y_dict, x, y, j, food_count, consumed_count, score
        self.color = color 

        if (abs(x - food_x_dict.get('food_x%s' % j)) <= 15 and abs(y - food_y_dict.get('food_y%s' % j)) <= 15):
            consumed_count = consumed_count + 1
            score = score + 1
            if (j <= food_count):
                j = j + 1
            if (j >= food_count):
                j = 0
                
        pygame.draw.circle(screen, self.color, (food_x_dict.get('food_x%s' % j), food_y_dict.get('food_y%s' % j)), 10, 0)

        if (j >= food_count):
            j = 0
        j = j + 1
        
def profile(score, health, ready):
    global power, time
    
    pygame.draw.rect(screen, white, (5, 5, 600, 80), 0)
    pygame.draw.rect(screen, dark_grey, (5, 5, 600, 80), 2)
    
    pygame.draw.rect(screen, dark_grey, (15, 15, 515, 14), 2)
    pygame.draw.rect(screen, dark_grey, (15, 32, 515, 14), 2)
    pygame.draw.rect(screen, dark_grey, (15, 49, 515, 14), 2)
    
    if (score < 300):
        pygame.draw.rect(screen, lime, (18, 18, (round(int(score * 1.7))), 9), 0)
    if (score >= 300):
        pygame.draw.rect(screen, lime, (18, 18, 510, 9), 0)
    if (ready < 750):
        pygame.draw.rect(screen, yellow, (18, 35, (round(int(ready / 1.5))), 9), 0)
    if (ready >= 750):
        pygame.draw.rect(screen, yellow, (18, 35, 510, 9), 0)
    if (health < 60):
        pygame.draw.rect(screen, red, (18, 52, (510 - (health * 5)), 9), 0)
    if (health >= 60):
        pygame.draw.rect(screen, red, (18, 52, 0, 9), 0)
        
    score_font_rendered = score_font.render(("Score: %s" % score), False, (dark_grey)) 
    screen.blit(score_font_rendered, (14, 63))
    
while True: 
    for event in pygame.event.get(): 
        if event.type == pygame.QUIT: pygame.display.quit()
    
    if (player_roll == 0):
        #roll = random.randint(1,5)
        roll = 4
        start_roll = pygame.key.get_pressed()
        if start_roll[pygame.K_r]:
            player_roll = 1
    
    gameboard(roll)
            
    start_space = pygame.key.get_pressed()
    if start_space[pygame.K_SPACE]:
        begin = 1

    if (begin == 1):
        direction = pygame.key.get_pressed()
                
        if (once == 0):

            enemy_x_dict = {}
            enemy_y_dict = {}
            enemy_speed_dict = {}    
            enemy_size_dict = {}
            enemy_dict = {}
            food_x_dict = {}
            food_y_dict = {}
            food_dict = {}

            for i in range(0, enemy_count):
                x_init = random.randint(50, 950)
                enemy_x_dict[('enemy_x%s' % i).format(i)] = x_init
            for i in range(0, enemy_count):
                y_init = random.randint(50, 450)
                enemy_y_dict[('enemy_y%s' % i).format(i)] = y_init
            for i in range(0, enemy_count):
                enemy_dict[('enemy_class%s' % i).format(i)] = None
            for i in range(0, enemy_count):
                size = random.randint(7, enemy_size)
                enemy_size_dict[('enemy_size%s' % i).format(i)] = size
            for i in range(0, enemy_count):
                speed = random.randint(1, enemy_speed)
                enemy_speed_dict[('enemy_speed%s' % i).format(i)] = speed
            for j in range(0, food_count):
                food_x_init = random.randint(50, 950)
                food_x_dict[('food_x%s' % j).format(j)] = food_x_init
            for j in range(0, food_count):
                food_y_init = random.randint(50, 450)
                food_y_dict[('food_y%s' % j).format(j)] = food_y_init
            for j in range(0, food_count):
                food_dict[('food_class%s' % j).format(j)] = None

            once = 1
                    
        if (roll == 1):
            env_color = purple
            food_color = yellow
            enemy_color = red
        if (roll == 2):
            env_color = green
            food_color = blue
            enemy_color = yellow
        if (roll == 3):
            env_color = red
            food_color = purple
            enemy_color = blue
        if (roll == 4): # mudlside
            env_color = brown
            food_color = orange_brown
            enemy_color = light_backing
        if (roll == 5): # smog
            env_color = white
            food_color = black
            enemy_color = grey
            
        env(env_color)
        profile(score, health, ready)
        sprite = Sprite(10, 5, 200, direction)
        for i in range(0, enemy_count):
            enemy_dict[('enemy_class%s' % i)] = Enemy(enemy_size_dict.get('enemy_size%s' % i), enemy_speed_dict.get('enemy_speed%s' % i), enemy_color) 
        for j in range(0, food_count):
            food_dict[('food_class%s' % j)] = Food(food_color) 
            
    pygame.display.flip()
    clock.tick(30)
